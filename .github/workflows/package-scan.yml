on:
  workflow_call:

jobs:
  package-macos:
    runs-on: [ macOS, sign ]
    env:
      OIDN_SIGN_FILE_MACOS: /NAS/packages/apps/signfile/mac/SignFile
    steps:
      # We need to checkout code first to get access to repo actions
      # used in next step.
      - uses: actions/checkout@v3
      # Custom action to WA submodules problem with OIDN
      - name: Checkout OIDN src code with submodules
        uses: ./.github/actions/checkout
        with:
          pat: ${{ secrets.PAT_TOKEN }}

      - name: Build
        run: |
         scripts/build.py package --compiler icc

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.job }}_artifact
          path: build/*.tar.gz

  package-linux:
    runs-on: [ Linux, docker ]
    container:
      image: amr-registry.caas.intel.com/renderkit/oidn-build:centos7
      options: --user root
      volumes:
        - /NAS:/NAS
    env:
      # NAS ICC is needed for linux (TODO - install it inside docker image)
      OIDN_ICC_DIR_LINUX: /NAS/packages/apps/intel/2020.1/bin

    steps:
      # We need to checkout code first to get access to repo actions
      # used in next step.
      - uses: actions/checkout@v3
      # Custom action to WA submodules problem with OIDN
      - name: Checkout OIDN src code with submodules
        uses: ./.github/actions/checkout
        with:
          pat: ${{ secrets.PAT_TOKEN }}

      - name: Build
        shell: bash
        run: |
         scripts/build.py package --compiler icc

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.job }}_artifact
          path: build/*.tar.gz

  package-windows:
    runs-on: [ Windows, build, icc19.0 ]
    env:
      OIDN_SIGN_FILE_WINDOWS: \\nassie.an.intel.com\NAS\packages\apps\signfile\windows\SignFile.exe
    steps:
      # We need to checkout code first to get access to repo actions
      # used in next step.
      - uses: actions/checkout@v3
      # Custom action to WA submodules problem with OIDN
      - name: Checkout OIDN src code with submodules
        uses: ./.github/actions/checkout
        with:
          pat: ${{ secrets.PAT_TOKEN }}

      - name: Build
        shell: cmd
        run: |
         python scripts/build.py package --compiler msvc15-icc19

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.job }}_artifact
          path: build/*.zip

  av-scan:
    runs-on: [ Linux, docker ]
    needs: [ package-linux, package-macos, package-windows ]
    container:
      image: amr-registry.caas.intel.com/renderkit/clamav:ubuntu20.04
      options: --user root
      volumes:
        - /NAS:/NAS
    env:
      STORAGE_PATH: /NAS/SDL
      CI_TOOLS_PATH: /NAS/tools/ci_tools/ci_tools-0.3.1
      SHARED_TOOLS_PATH: /NAS/tools

    steps:
      - name: Clean Workspace
        shell: bash
        run: |
         ls -A $GITHUB_WORKSPACE | xargs rm -rf

      - uses: actions/download-artifact@v3
        with:
          name: package-linux_artifact

      - uses: actions/download-artifact@v3
        with:
          name: package-macos_artifact

      - uses: actions/download-artifact@v3
        with:
          name: package-windows_artifact

      - name: Scan AV
        shell: bash
        run: |
         freshclam | tee -a /tmp/av_scan.log
         clamscan -va --max-filesize=512M --max-scansize=2048M --alert-broken --alert-exceeds-max oidn-* | tee -a /tmp/av_scan.log
         $CI_TOOLS_PATH/bin/store-files.sh $GITHUB_REPOSITORY $GITHUB_RUN_ID av /tmp/av_scan.log

  bdba-scan:
    runs-on: [ Linux, docker ]
    needs: [ package-linux, package-macos, package-windows ]
    env:
      BDBA_GROUP: 32
      BDBA_SERVER: https://bdba001.icloud.intel.com
      BDBA_TOKEN: ${{ secrets.BDBA_TOKEN }}

      STORAGE_PATH: /NAS/SDL
      CI_TOOLS_PATH: /NAS/tools/ci_tools/ci_tools-0.3.1
      SHARED_TOOLS_PATH: /NAS/tools

    container:
      image: amr-registry.caas.intel.com/renderkit/oidn-build:centos7
      options: --user root
      volumes:
        - /NAS:/NAS

    steps:
      - name: Clean Workspace
        shell: bash
        run: |
         ls -A $GITHUB_WORKSPACE | xargs rm -rf

      - uses: actions/download-artifact@v3
        with:
          name: package-linux_artifact

      - uses: actions/download-artifact@v3
        with:
          name: package-macos_artifact

      - uses: actions/download-artifact@v3
        with:
          name: package-windows_artifact

      - name: Scan BDBA
        shell: bash
        run: |
         $CI_TOOLS_PATH/bin/bdba.sh "./oidn-*"
         $CI_TOOLS_PATH/bin/store-files.sh $GITHUB_REPOSITORY $GITHUB_RUN_ID bdba "oidn-*.pdf"
         $CI_TOOLS_PATH/bin/store-files.sh $GITHUB_REPOSITORY $GITHUB_RUN_ID bdba "oidn-*.csv"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.job }}_artifact
          path: |
           oidn-*.pdf
           oidn-*.csv
