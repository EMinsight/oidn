name: CI workflow
on:
  push:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-rockylinux8:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      image: oidn/rockylinux:8.6
      cmd: scripts/build.py install --full
      artifact-out: build-rockylinux8
      artifact-path: ./build ./deps

  build-rockylinux8-debug:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      image: oidn/rockylinux:8.6
      cmd: scripts/build.py install --compiler clang --config Debug -D OIDN_DEVICE_SYCL=ON -D OIDN_DEVICE_SYCL_AOT=OFF -D OIDN_DEVICE_CUDA=ON
      artifact-out: build-rockylinux8-debug
      artifact-path: ./build ./deps

  build-rockylinux8-jit:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      image: oidn/rockylinux:8.6
      cmd: scripts/build.py install --full -D OIDN_DEVICE_SYCL_AOT=OFF
      artifact-out: build-rockylinux8-jit
      artifact-path: ./build ./deps

  build-rockylinux8-namespace:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      image: oidn/rockylinux:8.6
      cmd: scripts/build.py install --full -D OIDN_API_NAMESPACE=myoidn
      artifact-out: build-rockylinux8-namespace
      artifact-path: ./build ./deps

  build-rockylinux8-gcc:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      image: oidn/rockylinux:8.6
      cmd: scripts/build.py install --compiler gcc -D OIDN_DEVICE_CUDA=ON -D OIDN_DEVICE_HIP=ON
      artifact-out: build-rockylinux8-gcc
      artifact-path: ./build ./deps

  build-rockylinux8-gcc-debug:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      image: oidn/rockylinux:8.6
      cmd: scripts/build.py install --compiler gcc --config Debug -D OIDN_DEVICE_CUDA=ON
      artifact-out: build-rockylinux8-gcc-debug
      artifact-path: ./build ./deps

  build-rockylinux8-gcc-minimal:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      image: oidn/rockylinux:8.6
      cmd: scripts/build.py install --compiler gcc -D OIDN_FILTER_RT=OFF -D OIDN_FILTER_RTLIGHTMAP=OFF
      artifact-out: build-rockylinux8-gcc-minimal
      artifact-path: ./build ./deps

  build-ubuntu2204:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      image: oidn/ubuntu:22.04
      cmd: scripts/build.py install --full
      artifact-out: build-ubuntu2204
      artifact-path: ./build ./deps

  # build-ubuntu1804-gcc:
  #   secrets: inherit
  #   uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
  #   with:
  #     image: oidn-build:ubuntu18.04
  #     cmd: scripts/build.py install --compiler gcc
  #     artifact-out: build-ubuntu1804-gcc
  #     artifact-path: ./build ./deps

  # build-ubuntu1804-gcc-debug:
  #   secrets: inherit
  #   uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
  #   with:
  #     image: oidn-build:ubuntu18.04
  #     cmd: scripts/build.py install --compiler gcc --config Debug
  #     artifact-out: build-ubuntu1804-gcc-debug
  #     artifact-path: ./build ./deps

  # build-ubuntu1804-clang:
  #   secrets: inherit
  #   uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
  #   with:
  #     image: oidn-build:ubuntu18.04
  #     cmd: scripts/build.py --compiler clang

  # build-ubuntu1804-gcc-tbb2007:
  #   secrets: inherit
  #   uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
  #   with:
  #     image: oidn-build:ubuntu18.04
  #     cmd: |
  #       mkdir build
  #       cd build
  #       cmake ..
  #       make -j8 VERBOSE=1

  build-ubuntu2004-gcc-oiio:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      image: oidn-build:ubuntu20.04
      cmd: |
        mkdir build
        cd build
        cmake -D OIDN_APPS_OPENIMAGEIO=ON ..
        make -j8 VERBOSE=1

  # build-ubuntu2004-gcc-minimal:
  #   secrets: inherit
  #   uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
  #   with:
  #     image: oidn-build:ubuntu20.04
  #     cmd: scripts/build.py --compiler gcc -D OIDN_FILTER_RT=OFF -D OIDN_FILTER_RTLIGHTMAP=OFF

  build-arch-gcc-oiio:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      image: oidn-build:arch
      cmd: |
        mkdir build
        cd build
        cmake -D OIDN_APPS_OPENIMAGEIO=ON ..
        make -j8 VERBOSE=1

  test-rockylinux8-avx2:
    needs: build-rockylinux8
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      runs-on: '[ "Linux", "avx2" ]'
      image: oidn/rockylinux:8.6
      artifact-in: build-rockylinux8
      artifact-out: test-rockylinux8-avx2
      artifact-path: test.log
      cmd: scripts/test.py --device cpu

  test-rockylinux8-avx512:
    needs: build-rockylinux8
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      runs-on: '[ "Linux", "build", "avx512" ]'
      image: oidn/rockylinux:8.6
      artifact-in: build-rockylinux8
      artifact-out: test-rockylinux8-avx512
      artifact-path: test.log
      cmd: scripts/test.py --device cpu

  test-rockylinux8-sse4:
    needs: build-rockylinux8
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      runs-on: '[ "Linux", "build" ]'
      image: oidn/rockylinux:8.6
      artifact-in: build-rockylinux8
      artifact-out: test-rockylinux8-sse4
      artifact-path: test.log
      cmd: scripts/test.py --device cpu --arch pnr

  # test-ubuntu1804-gcc-avx2:
  #   needs: build-ubuntu1804-gcc
  #   secrets: inherit
  #   uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
  #   with:
  #     runs-on: '[ "Linux", "avx2" ]'
  #     image: oidn-build:ubuntu18.04
  #     artifact-in: build-ubuntu1804-gcc
  #     cmd: scripts/test.py

  # test-ubuntu1804-gcc-avx512:
  #   needs: build-ubuntu1804-gcc
  #   secrets: inherit
  #   uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
  #   with:
  #     runs-on: '[ "Linux", "build", "avx512" ]'
  #     image: oidn-build:ubuntu18.04
  #     artifact-in: build-ubuntu1804-gcc
  #     cmd: scripts/test.py

  # test-ubuntu1804-gcc-sse4:
  #   needs: build-ubuntu1804-gcc
  #   secrets: inherit
  #   uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
  #   with:
  #     runs-on: '[ "Linux", "build", "build" ]'
  #     image: oidn-build:ubuntu18.04
  #     artifact-in: build-ubuntu1804-gcc
  #     cmd: scripts/test.py --arch pnr

  # test-ubuntu1804-gcc-debug-avx2:
  #   needs: build-ubuntu1804-gcc-debug
  #   secrets: inherit
  #   uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
  #   with:
  #     runs-on: '[ "Linux", "avx2" ]'
  #     image: oidn-build:ubuntu18.04
  #     artifact-in: build-ubuntu1804-gcc-debug
  #     cmd: scripts/test.py

  # test-ubuntu1804-gcc-debug-avx512:
  #   needs: build-ubuntu1804-gcc-debug
  #   secrets: inherit
  #   uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
  #   with:
  #     runs-on: '[ "Linux", "build", "avx512" ]'
  #     image: oidn-build:ubuntu18.04
  #     artifact-in: build-ubuntu1804-gcc-debug
  #     cmd: scripts/test.py

  build-macos-clang-arm:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "arm" ]'
      artifact-out: build-macos-clang-arm
      artifact-path: ./build ./deps
      cmd: scripts/build.py install --compiler clang

  build-macos-clang-debug-arm:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "arm" ]'
      artifact-out: build-macos-clang-debug-arm
      artifact-path: ./build ./deps
      cmd: scripts/build.py --compiler clang --config Debug

  build-macos-clang-namespace-arm:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "arm" ]'
      cmd: scripts/build.py --compiler clang -D OIDN_API_NAMESPACE=myoidn

  test-macos-clang-arm:
    needs: build-macos-clang-arm
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "arm" ]'
      artifact-in: build-macos-clang-arm
      artifact-out: test-macos-clang-arm
      artifact-path: test.log
      cmd: scripts/test.py

  test-macos-clang-debug-arm:
    needs: build-macos-clang-debug-arm
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "arm" ]'
      artifact-in: build-macos-clang-debug-arm
      artifact-out: test-macos-clang-debug-arm
      artifact-path: test.log
      cmd: scripts/test.py

  build-macos-clang:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "avx2", "x86_64" ]'
      artifact-out: build-macos-clang
      artifact-path: ./build ./deps
      cmd: scripts/build.py install --compiler clang

  build-macos-clang-debug:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "avx2", "x86_64" ]'
      cmd: scripts/build.py --compiler clang --config Debug

  build-macos-clang-namespace:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "avx2", "x86_64" ]'
      cmd: scripts/build.py --compiler clang -D OIDN_API_NAMESPACE=myoidn

  test-macos-clang-avx2:
    needs: build-macos-clang
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_macos.yml@main
    with:
      runs-on: '[ "macOS", "avx2", "sign", "x86_64" ]'
      artifact-in: build-macos-clang
      artifact-out: test-macos-clang-avx2
      artifact-path: test.log
      cmd: scripts/test.py

  test-macos-clang-avx512:
    needs: build-macos-clang
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "avx512", "x86_64" ]'
      artifact-in: build-macos-clang
      artifact-out: test-macos-clang-avx512
      artifact-path: test.log
      cmd: scripts/test.py

  build-windows-msvc15-icc:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_windows.yml@main
    with:
      runs-on: '[ "Windows", "build", "icc19.0" ]'
      artifact-out: build-windows-msvc15-icc
      artifact-path: build deps
      cmd: python scripts/build.py install --compiler msvc15-icc19

  build-windows-msvc15:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_windows.yml@main
    with:
      runs-on: '[ "Windows", "build" ]'
      cmd: python scripts/build.py install --compiler msvc15

  build-windows-msvc15-debug:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_windows.yml@main
    with:
      runs-on: '[ "Windows", "build" ]'
      cmd: python scripts/build.py --compiler msvc15 --config Debug

  build-windows-msvc15-namespace:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_windows.yml@main
    with:
      runs-on: '[ "Windows", "build" ]'
      cmd: python scripts/build.py --compiler msvc15 -D OIDN_API_NAMESPACE=myoidn

  build-windows-msvc16:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_windows.yml@main
    with:
      runs-on: '[ "Windows", "build" ]'
      artifact-out: build-windows-msvc16
      artifact-path: build deps
      cmd: python scripts/build.py install --compiler msvc16

  test-windows-msvc16-avx512:
    needs: build-windows-msvc16
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_windows.yml@main
    with:
      runs-on: '[ "Windows", "avx512", "NAS" ]'
      artifact-in: build-windows-msvc16
      artifact-out: test-windows-msvc16-avx512
      artifact-path: test.log
      cmd: python scripts/test.py

  test-windows-icc-avx512:
    needs: build-windows-msvc15-icc
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_windows.yml@main
    with:
      runs-on: '[ "Windows", "avx512", "NAS" ]'
      artifact-in: build-windows-msvc15-icc
      artifact-out: test-windows-icc-avx512
      artifact-path: test.log
      cmd: python scripts/test.py

  kw-build-scan-report:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_static_analysis.yml@devel
    with:
      project: oidn
      build: scripts/build.py

  snyk-scan:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_snyk.yml@main

  package-linux:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_docker.yml@main
    with:
      image: oidn/rockylinux:8.6
      cmd: scripts/build.py package --full
      artifact-out: package-linux
      artifact-path: ./build/oidn-*.tar.gz

  package-macos:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_macos.yml@main
    with:
      runs-on: '[ "macOS", "sign", "x86_64" ]'
      cmd: scripts/build.py package --full
      artifact-out: package-macos
      artifact-path: ./build/oidn-*.tar.gz

  package-macos-arm:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_macos.yml@main
    with:
      runs-on: '[ "macOS", "sign", "arm" ]'
      cmd: scripts/build.py package --full
      artifact-out: package-macos-arm
      artifact-path: ./build/oidn-*.tar.gz

  package-windows:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/oidn_windows.yml@main
    with:
      runs-on: '[ "Windows", "build", "cuda" ]'
      cmd: python scripts/build.py package --full
      artifact-out: package-windows
      artifact-path: build\oidn-*.zip

  antivirus-scan:
    needs:
      - package-linux
      - package-macos
      - package-windows
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/antivirus_scan.yml@main
    with:
      project: oidn
      artifact-in-linux: package-linux
      artifact-in-macos: package-macos
      artifact-in-windows: package-windows
      path: ./build/oidn-*

  antivirus-scan-arm:
    needs:
      - package-macos-arm
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/antivirus_scan.yml@main
    with:
      project: oidn
      artifact-in-macos: package-macos-arm
      path: ./build/oidn-*

  binary-analysis:
    needs:
      - package-linux
      - package-macos
      - package-windows
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/binary_analysis.yml@main
    with:
      project: oidn
      artifact-in-linux: package-linux
      artifact-in-macos: package-macos
      artifact-in-windows: package-windows
      path: ./build/oidn-*

  binary-analysis-arm:
    needs:
      - package-macos-arm
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/binary_analysis.yml@main
    with:
      project: oidn
      artifact-in-macos: package-macos-arm
      path: ./build/oidn-*
